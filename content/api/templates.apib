FORMAT: 1A
title: Templates
description: Manage reusable content templates that are run through the SparkPost substitution engine and can be used when sending messages.

# Group Templates

Templates are a way to store and edit email content.
Templates are used in a transmission by providing the id of the template at the time of transmission submission.
Each textual component of the template (headers, text, and html) is run through the substitution engine
to produce recipient specific email messages. The Templates API provides the means to manage your templates.

## Template Object

+ Data Structure: Attributes
    + id (string) - Unique alphanumeric ID used to reference the template. At a minimum, id or name is required upon creation. It is auto generated if not provided. After a template has been created, this property cannot be changed. Maximum length - 64 bytes
    + name (string) - Editable display name. At a minimum, id or name is required upon creation. The name does not have to be unique. Maximum length - 1024 bytes
    + description (string) - Description of the template. Maximum length - 1024 bytes
    + content (object) - Content that will be used to construct an email. Substitution syntax is supported in all content attributes. Maximum length - 20 MBs
        + html (string) - HTML content for the email's `text/html` MIME part. At a minimum, html or text is required. Expected in the UTF-8 charset with no `Content-Transfer-Encoding` applied.
        + text (string) - Text content for the email's `text/plain` MIME part. At a minimum, html or text is required. Expected in the UTF-8 charset with no `Content-Transfer-Encoding` applied.
        + subject (string) - Email subject line. Expected in the UTF-8 charset without RFC2047 encoding.
        + from (string) - Address (`"deals@company.com"`) used to compose the email's `From` header.
        + from (object) - Object composed of the `name` and `email` fields (`{ "name": "My Company", "email": "deals@company.com" }`) used to compose the email's `From` header.
        + reply_to (string) - Email address used to compose the email's `Reply-To` header.
        + headers (object) - Object containing headers other than `Subject`, `From`, `To`, and `Reply-To`. See the [Header Notes](#header-header-notes).
    + published (boolean) - Whether the template is published or is a draft version. A template cannot be changed from published to draft.
    + options (object) - Object containing template options. All template options can be overwritten in a transmission's options.
        + transactional (boolean) - Distinguish between transactional and non-transactional messages for unsubscribe and suppression purposes.
        + open_tracking (boolean) - Enable or disable open tracking.
        + click_tracking (boolean) - Enable or disable click tracking.
    + has_draft (boolean) -  Whether the template has a draft version.
    + has_published (boolean) -  Whether the template has a published version.
    + last_update_time (string) - The last date any version of this template (draft of published) was updated.
    + last_use (string) - The last date any version of this template (draft or published) was used for generating an email. Only present if template has been used.
    + shared_with_subaccounts (boolean) - Whether this template can be used by subaccounts. Only present on templates that belong to a master account.
    + subaccount_id (number) - Subaccount the tamplate belongs to. Only present on templates that belong to a subaccount.


#### Header Notes

* Headers such as `Content-Type` and `Content-Transfer-Encoding` are not allowed here as they are auto generated upon construction of the email.
* The `To` header should not be specified here, since it is generated from each recipient's `address.name` and `address.email`.
* Each header value is expected in the UTF-8 charset without RFC2047 encoding.
* Set the `X-Customer-Campaign-ID` header to assossiate the template with a Campaign.
* Substitution syntax is supported.


#### email_rfc822

Alternately, the content object may contain a single `email_rfc822` field. `email_rfc822` is mutually exclusive with all of the above fields.

+ Data Structure: RFC 822
    + email_rfc822 (string) - Pre-built message with the format as described by the [message/rfc822 Content-Type](http://tools.ietf.org/html/rfc2046#section-5.2.1).

* Substitutions will be applied in the top-level headers and the first non-attachment `text/plain` and first non-attachment `text/html` MIME parts only.
* Lone `LF`s and lone `CR`s are allowed. The system will convert line endings to `CRLF` where necessary.
* The provided `email_rfc822` should NOT be dot stuffed.  The system dot stuffs before sending the outgoing message.
* The provided `email_rfc822` should NOT contain the SMTP terminator `\r\n.\r\n`.  The system always adds this terminator.
* The provided `email_rfc822` in MIME format will be rejected if SparkPost cannot parse the contents into a MIME tree.


### Create a Template [POST /template]

Create a template by providing a **template object** as the POST request body.

At a minimum, the `name` and `content` fields are required, where content must contain the `from`, `subject`, and at least one of `html` or `text` fields.

By default, when a template is referenced in a transmission, it is the published version of that template.  To submit a transmission that uses a draft template, set the transmission field `use_draft_template` to true.  For additional details, see the [Transmissions API documentation](/api/transmissions/) for [Using a Stored Template](/api/transmissions/#header-using-a-stored-template).


#### Create Parts

The following are key points about creating parts in your templates, as shown in the example:

* The `id` field may be supplied, and it must be unique.
* By default, templates are created as drafts.  If you would like to directly publish a template upon creation, set the `published` field to true.
* Open and click tracking may be enable/disabled at the template level using the `open_tracking` and `click_tracking` fields.
* The `from` field may be a object composed of `email` and `name`.
* A `Reply-To` header may be specified using the `reply_to` field.
* Both `text` and `html` may be provided.
* Additional headers may be specified in the `headers` object.


#### Create RFC822

Fully formed email_rfc822 content may be provided instead of the `text`, `html`, `from`, and `subject` parts, as shown in the example.

+ Request Create Basic Template (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "name": "Summer Sale!",
                "shared_with_subaccounts": false,
                "content": {
                    "from": "marketing@bounces.company.example",
                    "subject": "Summer deals",
                    "html": "<b>Check out these deals!</b>"
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "id": "11806290401558530"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "description": "Unconfigured or unverified sending domain.",
                    "code": "7001",
                    "message": "Invalid domain"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "description": "Subaccounts cannot set the shared_with_subaccounts flag",
                    "code": "1200",
                    "message": "invalid params"
                }
            ]
        }

+ Response 422 (application/json)

        {
            "errors": [
                {
                    "part": "text",
                    "description": "Error while compiling part text: line 4: syntax error near 'age'",
                    "line": 4,
                    "code": "3000",
                    "message": "substitution language syntax error in template content"
                }
            ]
        }

+ Request Create Parts (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body


            {
                "id": "summer_sale",
                "name": "Summer Sale!",
                "published": true,
                "description": "Template for a Summer Sale!",
                "shared_with_subaccounts": false,
                "options": {
                    "open_tracking": false,
                    "click_tracking": true
                },
                "content": {
                    "from": {
                      "email": "marketing@bounces.company.example",
                      "name": "Example Company Marketing"
                    },
                    "subject": "Summer deals for {{name}}",
                    "reply_to": "Summer deals <summer_deals@company.example>",
                    "text": "Check out these deals {{name}}!",
                    "html": "<b>Check out these deals {{name}}!</b>",
                    "headers": {
                      "X-Customer-Campaign-ID": "Summer2014"
                    }
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "id": "summer_sale"
            }
        }


+ Request Create RFC822 (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "id": "another_summer_sale",
                "name": "Summer Sale!",
                "published": true,
                "options": {
                    "open_tracking": false,
                    "click_tracking": true
                },
                "content": {
                    "email_rfc822": "Content-Type: text/plain\nFrom: Example Company Marketing <marketing@bounces.company.example>\nReply-To:Summer deals <summer_deals@company.example>\nX-Customer-Campaign-ID: Summer2014\nSubject: Summer deals for {{name}}\n\nCheck out these deals {{name}}!"
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "id": "another_summer_sale"
            }
        }

### Retrieve a Template [GET /templates/{id}{?draft}]

By default, the most recently updated version is returned. Use the `draft` query parameter to specify a draft or published
template.


The result will include a `last_update_time` field. The `last_update_time` is the time the template was last updated, for both draft and published versions.

If the template was used for message generation, the result will also include a `last_use` field. The `last_use` time represents the last time any version of this template was used (draft or published).

For a master account owned template **only**, the results will include the `shared_with_subaccounts` field reflecting the template's shared status.

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + draft (optional, boolean, `true`) ...If true, returns the most recent draft template.  If false, returns the most recent published template.  If not provided, returns the most recent template version regardless of draft or published.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

        {
            "results": {
                "id": "summer_sale",
                "name": "Summer Sale!",
                "description": "",
                "has_draft": true,
                "has_published": true,
                "published": false,
                "shared_with_subaccounts": false,
                "last_update_time": "2014-05-22T15:12:59+00:00",
                "last_use": "2014-06-02T08:15:30+00:00",
                "options": {
                    "open_tracking": false,
                    "click_tracking": true,
                    "transactional": false
                },
                "content": {
                    "from": {
                        "email": "marketing@bounces.company.example",
                        "name": "Example Company Marketing"
                    },
                    "subject": "Summer deals for {{name}}",
                    "reply_to": "Summer deals <summer_deals@company.example>",
                    "text": "Check out these deals {{name}}!",
                    "html": "<b>Check out these deals {{name}}!</b>",
                    "headers": {
                        "X-Customer-Campaign-ID": "Summer2014"
                    }
                }
            }
        }

### Update a Template [PUT /templates/{id}{?update_published}]

By default, an update operates on an existing draft version.
An existing published version can be overwritten directly by setting the `update_published` query parameter to `true`.
Attempting to update the published version of a template when only a draft version exists (and vice versa) will result in an error.

If a content object is provided in the update request, it must contain all relevant content fields whether they are being changed or not.
The new content will completely overwrite the existing content.


+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + update_published = `false` (optional, boolean, `false`) ... If true, directly overwrite the existing published template.  If false, update the existing draft.

+ Request Update (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "options": {
                    "open_tracking": true
                },
                "name": "A new name!",
                "shared_with_subaccounts": true,
                "content": {
                    "from": {
                        "email": "marketing@bounces.company.example",
                        "name": "Example Company Marketing"
                    },
                    "subject": "Updated Summer deals for {{name}}",
                    "reply_to": "Summer deals <summer_deals@company.example>",
                    "text": "Updated: Check out these deals {{name}}!",
                    "html": "<b>Updated: Check out these deals {{name}}!</b>"
                }
            }

+ Response 200

Publishing a template is a special kind of update.
It uses the most recent draft version to create a new published version.
The body of the PUT request should contain the `"published": true` attribute as shown in the example.
The `update_published` parameter should be omitted, or specified as `false`.

+ Request Publish (application/json)

  When publishing a draft template,

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

        {
            "published": true
        }

+ Response 200

### Preview a Template [POST /templates/{id}/preview{?draft}]

Preview the most recent version of an existing template.
The template's content will be expanded using the substitution data provided and returned
in the response. By default, the most recently updated version is returned. Use the `draft` query parameter to specify a draft or published
template.

See the [Substitutions Reference section](/api/substitutions-reference/) for more information.

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template
    + draft (optional, boolean, `true`) ... If true, previews the most recent draft template. If false, previews the most recent published template. If not provided, previews the most recent template version regardless of draft or published.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "substitution_data": {
                    "name": "Natalie",
                    "age": 35,
                    "member": true
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "from": {
                    "email": "marketing@bounces.company.example",
                    "name": "Example Company Marketing"
                },
                "subject": "Summer deals for Natalie",
                "reply_to": "Summer deals <summer_deals@company.example>",
                "text": "Check out these deals Natalie!",
                "html": "<b>Check out these deals Natalie!</b>",
                "headers": {
                    "X-Customer-Campaign-ID": "Summer2014"
                }
            }
        }

### Delete a Template [DELETE /templates/{id}]

Deletes all versions, both published and draft versions, of a template.

<banner status="info">If a transmission uses a template, the template cannot be deleted if the transmission is submitted or generating.</banner>

+ Parameters
    + id (required, string, `11714265276872`) ... ID of the template

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200 (application/json)

        {}

+ Response 409 (application/json)

        {
            "errors": [
                {
                    "message": "resource conflict",
                    "code": "1602",
                    "description": "Template is in use by msg generation"
                }
            ]
        }

### List all Templates [GET /templates{?draft,shared_with_subaccounts}]

+ Parameters
    + draft (optional, boolean, `true`) ...If true, returns the most recent draft template.  If false, returns the most recent published template. When not provided, returns the most recent template version regardless of draft or published.
    + shared_with_subaccounts (optional, boolean, `true`) ...If true, returns only shared templates. If false, returns only non-shared templates. When not provided, returns both shared and non-shared templates.


Returns an array of most recent version of each template in your account.
Each object returned is an abbreviated version of the full template object with
the following attributes:

+ Data Structure: Template List Object
    + id (string) - Unique template ID.
    + name (string) - Template name.
    + description (string) - Template description.
    + published (bloolean) - Published state of the template (true = published, false = draft).
    + last_update_time (string) - The time the template was last updated.
    + has_draft (boolean) - flag indicating whether the template has a draft version.
    + has_published (boolean) - flag indicating whether the template has a published version.
    + last_use (string) - The last time any version of this template (draft or published) was used for generating an email. Only present if template has been used.
    + shared_with_subaccounts: Whether the template is shared with subaccounts. Only present on templates that belong to a master account.
    + subaccount_id: Subaccount the template belongs to. Only present on templates that belong to a subaccount.


+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "summer_sale",
                    "name": "Summer Sale!",
                    "published": true,
                    "description": "",
                    "has_draft": true,
                    "has_published": true,
                    "last_update_time": "2017-08-11T12:12:12+00:00",
                    "shared_with_subaccount": true
                },
                {
                    "id": "daily",
                    "name": "daily",
                    "published": false,
                    "description": "Daily roundup email.",
                    "has_draft": true,
                    "has_published": true,
                    "last_use": "2018-05-08T14:49:03+00:00"
                    "last_update_time": "2018-02-10T14:15:16+00:00",
                    "shared_with_subaccount": false
                }
            ]
        }



### Error Object

On success, the API returns a `results` object along with HTTP 200.
On failure, an `errors` array will be returned along with HTTP 4xx or 5xx.
Each error is described in a object with the following fields:

+ Data Structure: Attributes
    + message: (string) - Explains the class of error
    + code: (string) - Identifies the class of error
    + description: (string) - Explanation of error
    + part (enum) - Identifies the MIME part where the error occurred
        + text
        + html
        + Header:Subject
        + text/plain
    + line (number) - Identifies the line number within the MIME part identified by the part attribute

+ Sample

    ```json
    {
        "message": "substitution language syntax error in template content",
        "code": "3000",
        "description": "Error while compiling part text: line 4: syntax error near 'age'",
        "part": "html",
        "line": 4,
    }
    ```
