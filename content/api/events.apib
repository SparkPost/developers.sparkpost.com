FORMAT: 1A
title: Events
description: Query detailed SparkPost event data for futher analysis and processing.
label: New

# Group Events

The Events API allows searching for recent events, and supports various types of result filtering. 
Available events include message status – injection, delivery, bounce – as well as recipient engagement – clicks and opens. 
You can fetch all event types or only specific ones, such as bounces, deliveries, or clicks.
You can also filter by date range, campaign, or just about any other field.
It provides access to similar event data that can also be delivered via [Webhooks](/api/webhooks/).

<Banner status="info">The maximum URI length is 4096 characters, so please keep your queries below that size when adding filters to an API call.</Banner>

___

__The SparkPost Events API uses MaxMind software [MaxMind License](https://www.maxmind.com/download/geoip/database/LICENSE.txt)__

___

### Data Retention

Data in the Events API is retained for 10 days. Aggregate reporting data is available through [metrics](/api/metrics/) or the app for up to 6 months.

### Event Types

You can query the following types of events from the Events API.

<MessageEvents></MessageEvents>

### Keyword Searching
Some of the filter query parameters in the Events API support keyword searching.  Keyword searching allows for filtering results without the precise value
and also allows filtering for multiple values, without having to enter in each value individually.  Keywords are determined by natural breaks in phrases by
spaces, dashes, underscores, and in special cases periods(`recipient_domains` and `sending_domains`).

For example, suppose the following campaigns are sent via SparkPost: `blackfriday-specials`, `blackfriday-members`, and `blackfriday-flash-deals`.
Without keyword searching, to retrieve results for all three campaigns, `?campaigns=blackfriday-specials,blackfriday-members,blackfriday-flash-deals` would need to be
added to the Events API request. With keyword searching, the previous example can be condensed into `?campaigns=blackfriday`, and the same data is returned as would be by
the much longer filter.

Its important to distinguish that searching for a keyword is different than a partial search.  In the previous example, 
searching for `?campaigns=friday` will not return any of the same results that `?campaigns=blackfriday` would return.

Filters that support keyword searching are:

* `ab_tests`
* `campaigns`
* `ip_pools`
* `reasons`
* `recipient_domains`
* `sending_domains`
* `subjects`
* `templates`

## Pagination [/v1/events]
The Events API supports pagination for queries with larger result sets. Pagination is done through the use of the `cursor` and `per_page` query parameters.
The `per_page` query parameter tells the Events API the number of events to return in a single request, and supports a maximum value of 10,000.

To start a paging request, add the query parameter `?cursor=initial` to your Events API request. This will fetch the first page of results. If cursor is not provided, then the default value of `initial` is applied.
In the response body, there are three main keys: `results`, `total_count` and `links`. `results` is an array which contains the page of JSON events that matched the request,
`total_count` is an integer that describes the total number of JSON events that matched your request, and `links` is an object which provides a way to request the next page of events, if there is more than one page.

Once you have the response, you then can use `links` to retrieve the URL for your next page, which will be prefilled with the appropriate value for the `cursor` query parameter,
as well as any other filters you supplied with the original request.

In the following examples, to retrieve the first page, we use the `initial` value for the `cursor` query parameter.  the `cursor` value from
the `next` key in the `links` object, and use that to make the request for the second page. This process would then be repeated until all results have been paged through,
at which point the `links` object will not have a `next` key, and no further additional requests are necessary.

If your result set fits in one page of data, then the `links` object will not have a `next` key.

<Banner status="info">Pagination requests count towards the number of requests allowed by rate limiting, the same as non-paginated requests.</Banner>

### Retrieve First Page [GET /v1/events/message{?per_page,cursor}]

+ Parameters
    + per_page: `1000` (string, optional) 
    + cursor: `initial` (string, optional)

+ Response
```
    {
      "results": [
        ...
      ],
      "total_count": 20000,
      "links": {
        "next": "/api/v1/events/message?events=delivery&per_page=1000&cursor=WycyMDE4LTExLTA1VDIyOjQ1OjM5LjAwMFonLCAnc3BjLTM4MTQ1MjY3MjMyNTA2NTEwJ10="
      }
    }
```

### Retrieve Subsequent Page [GET /v1/events/message{?per_page,cursor}]
+ Parameters
    + per_page: `1000` (string, optional) 
    + cursor: `WycyMDE4LTExLTA1VDIyOjQ1OjM5LjAwMFonLCAnc3BjLTM4MTQ1MjY3MjMyNTA2NTEwJ10=` (string, optional)

+ Response
```
    {
      "results": [
        ...
      ],
      "total_count": 20000,
      "links": {
        "next": "/api/v1/events/message?events=delivery&per_page=1000&cursor=WycyMDE4LTExLTA0VDIyOjQ1OjM5LjAwMFonLCAndWF0LTM4MTQ1MjE3MjUyNTY2NTIwJ10="
      }
    }
```

## Search [/v1/events]

### Search for Message Events [GET /v1/events/message{?ab_tests,ab_test_versions,bounce_classes,campaigns,cursor,delimiter,events,from,from_addresses,ip_pools,messages,per_page,reasons,recipients,recipient_domains,subjects,sending_domains,sending_ips,subaccounts,templates,to,transmissions}]

Returns a list of message events that matched the filtered search.

+ Parameters
    + from (string, optional) - Datetime in format of YYYY-MM-DDTHH:MM.
        + Default: `24 hours ago`
    + to (string, optional) - Datetime in format of YYYY-MM-DDTHH:MM.
        + Default: `1 minute ago`
    + cursor (string, optional) - Results cursor for pagination. Used in conjunction with `per_page` parameter. See [Pagination](/api/events/#events-pagination) section for details.
        + Default: `initial`
    + per_page (number, optional) - Maximum number of results to return per page. Must be between 1 and 10,000.
        + Default: `1000`
    + delimiter (string, optional) ... Specifies the delimiter for query parameter lists.
        + Default: `,`
    + events (string, optional) - Comma delimited list of event types to search.
        + Default: `all event types`
    + recipients (string, optional, `recipient@example.com`) ... Comma delimited list of recipients to search.
    + recipient_domains (string, optional) ... Comma delimited list of recipient domains to search. Supports keyword searching by domain segment.
    + from_addresses (string, optional) - Comma delimited list of friendly from addresses to search.
    + sending_domains (string, optional) - Comma delimited list of sending domains to search. Supports keyword searching by domain segment.
    + subjects (string, optional) - Comma delimited list of subject lines from the email header to search. Supports keyword searching.
    + bounce_classes (number, optional) - Comma delimited list of bounce classification codes to search. See [Bounce Classification Codes](https://www.sparkpost.com/docs/deliverability/bounce-classification-codes/).
    + reasons (string, optional) ... Comma delimited list of Bounce/failure/rejection reason to search. Supports keyword searching
    + campaigns (string, optional) ... Comma delimited list of campaign IDs to search. Supports keyword searching.
    + templates (string, optional, `my-template`) ... Comma delimited list of template IDs to search. Supports keyword searching.
    + sending_ips (string, optional) - Comma delimited list of sending IP addresses to search.
    + ip_pools (string, optional) - Comma delimited list of IP pool IDs to search. Supports keyword searching.
    + subaccounts (string, optional) - Comma delimited list of subaccount IDs to search.
    + messages (string, optional) - Comma delimited list of message IDs to search.
    + transmissions (string, optional) - Comma delimited list of transmission IDs to search.
    + ab_tests (string, optional) - Comma delimited list of A/B test IDs to search. Supports keyword searching.
    + ab_test_versions (number, optional) - Comma delimited list of version numbers of A/B tests to search. If provided, `ab_tests` parameter becomes required.

+ Request

    + Headers

        Accept: application/json
        Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response
    
        {
            "results": [
                {
                    "type": "click",
                    "campaign_id": "Example Campaign Name",
                    "customer_id": "1",
                    "delv_method": "esmtp",
                    "event_id": "92356927693813856",
                    "friendly_from": "sender@example.com",
                    "geo_ip": {
                        "country": "US",
                        "region": "MD",
                        "city": "Columbia",
                        "latitude": "39.1749",
                        "longitude": "-76.8375"
                    },
                    "injection_time": "2016-04-18T14:25:07.000+00:00",
                    "ip_address": "127.0.0.1",
                    "ip_pool": "Example-Ip-Pool",
                    "message_id": "000443ee14578172be22",
                    "msg_from": "sender@example.com",
                    "msg_size": "1337",
                    "num_retries": "2",
                    "queue_time": "12",
                    "rcpt_meta": {
                        "customKey": "customValue",
                        "anotherKey": ["value1", "value2", "value3"]
                    },
                    "rcpt_tags": [
                        "male",
                        "US"
                    ],
                    "rcpt_to": "recipient@example.com",
                    "raw_rcpt_to": "recipient@example.com",
                    "rcpt_type": "cc",
                    "recipient_domain": "example.com",
                    "routing_domain": "example.com",
                    "sending_domain" "example.com",
                    "sending_ip": "127.0.0.1",
                    "subaccount_id": "101",
                    "subject": "Summer deals are here!",
                    "target_link_name": "Example Link Name",
                    "target_link_url": "http://example.com",
                    "template_id": "my-template",
                    "template_version": "1",
                    "timestamp": "2016-04-18T14:25:07.000+00:00",
                    "transmission_id": "65832150921904138",
                    "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36"
                }
            ],
            "total_count": 1,
            "links": {}
        }

## Documentation [/v1/events/message/documentation]

These endpoints are used to generate the samples and descriptions for the [Event Types](#header-event-types) section.

### Events Documentation [GET]

Returns a list of descriptions of the event fields that could be included in a response from the message events search. Fields will vary by event type.

+ Request

    + Headers

            Accept: application/json

+ Response

    ```
    {
      "results": [
        {
          "type": {
            "description": "Type of event this record describes",
            "sampleValue": "bounce"
          },
          ...
        },
        ...
      ]
    }
    ```



### Events Samples [GET /v1/events/message/samples{?events}]

Returns an example message event for each event type listed in the `events` parameter.

+ Parameters
    + events (optional, string, `bounce`) ... Event types for which to get a sample payload. Defaults to all event types. See [Events Types](/api/events/#header-event-types) for the list of available event types.

+ Request

  + Headers

            Accept: application/json

+ Response

    ```
    {
      "results": [
        {
          "type": "bounce",
          ...
        }
      ]
    }
    ```
