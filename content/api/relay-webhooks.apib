FORMAT: 1A
title: Relay Webhooks API
description: Manage relay webhooks, a way to instruct SparkPost to accept inbound email on your behalf and forward it to you over HTTP.

# Group Relay Webhooks

Relay Webhooks are a way to instruct SparkPost to forward messages sent to an inbound domain to a target url for your own consumption. Before you create a relay webhook, first create and configure an [inbound domain](/api/inbound-domains/). The Relay Webhooks API provides the means to create, list, retrieve, update, and delete a relay webhook.  To consume event webhooks see [Event Webhooks](https://developers.sparkpost.com/api/webhooks/)

## Relay Webhook Object

+ Data Structure: Attributes
    + id (string) - Unique ID
    + name (string) - Relay webhook name
    + target (string) - URL of the target to which to POST relay batches
    + auth_type (enum) - Type of authentication to be used during POST requests to target.
        + none
        + oauth2
    + auth_request_details (object) - Object containing details needed to request authorization token for OAuth 2.0. This is required when `auth_type` is oauth2 and only grant_type of credentials is supported.
        + url (string, required) - The URL for the authorization server.
        + body (object, required) - The body to send in the request to the authorization server. This likely should contain the client ID, client secret, and grant type.
    + auth_token (string) - Authentication token to present in the `X-MessageSystems-Webhook-Token` header of POST requests to target. Use this token in your target application to confirm that data is coming from SparkPost.
    + match: SMTP (object) - Restrict which inbound messages will be relayed to the target.
        + protocol: SMTP (string) - Inbound messaging protocol associated with this webhook.
        + domain (string) - Inbound domain associated with this webhook.
    + custom_headers (object) - Object of custom HTTP headers to be used during POST requests to target.
+ Sample

    ```
    {
        "id": "12013026328707075",
        "name": "Inbound Customer Replies",
        "target": "https://webhooks.customer.example/replies",
        "auth_token": "5ebe2294ecd0e0f08eab7690d2a6ee69",
        "match": {
            "protocol": "SMTP",
            "domain": "example.com"
        }
    }
    ```

### Custom HTTP Headers Properties

The custom headers JSON object allows you to add up to five custom headers to your relay webhook. The `custom_headers` object may only be up to 3,000 bytes in size, and must be formatted as an object with keys as strings or numbers. Headers already used by SparkPost will not be allowed, and SparkPost may also disallow some HTTP headers for security reasons.

**Adding Custom Headers**

When creating (POST) or updating (PUT) a Relay Webhook:

```json
{
  "custom_headers": {
    "header1": "value1",
    "header2": "value2"
  }
}
```

**Removing Custom Headers**

When updating (PUT) a Relay Webhook:

```json
{
  "custom_headers": {}
}
```

## Relay Webhook Payload

The following fields will be included in each object posted to the relay webhook's target:

+ Data Structure: relay_message
    + content (object) - The content parsed from the incoming message.
        + html (string) - Contents of the first text/html part of the message.
        + text (string) - Contents of the first text/plain part of the message.
        + subject (string) - "Subject" header value (decoded from email).
        + to (array[string]) - "To" header value (decoded from email), RFC2822 address list.
        + cc (array[string]) - "CC" header value (decoded from email), RFC2822 address list.
        + headers (array[object]) - Ordered array of email top-level headers. This array preserves ordering and allows for multiple occurrences of a header (e.g. to support trace headers such as "Received").
        + email_rfc822 (string)
            Raw MIME content for an email. If the Raw MIME content contains at least one non UTF-8 encoded character, the entire `email_rfc822` value will be base64 encoded and `email_rfc822_is_base64` will be set to true.
        + email_rfc822_is_base64 (boolean)
            Whether the `email_rfc822` value is base64 encoded.
    + friendly_from (string)
        Email address used to compose the "From" header
    + msg_from (string)
        [SMTP envelope](http://www.rfcreader.com/#rfc5321_line817) "MAIL FROM", matches "Return-Path" header address
    + rcpt_to (string)
        [SMTP envelope](http://www.rfcreader.com/#rfc5321_line817) "RCPT TO"
    + webhook_id (string) - ID of the relay webhook which triggered this relay message.
    + protocol: smtp (string) - Protocol of the originating inbound message.
    + customer_id (string) - Customer ID of the customer that created the relay webhook.
+ Sample

    ```
    [
        {
            "msys": {
               "relay_message": {
                    "content": {
                        "email_rfc822": "Return-Path: <me@here.com>\r\nMIME-Version: 1.0\r\nFrom: me@here.com\r\nReceived: by 10.114.82.10 with HTTP; Mon, 4 Jul 2016 07:53:14 -0700 (PDT)\r\nDate: Mon, 4 Jul 2016 15:53:14 +0100\r\nMessage-ID: <484810298443-112311-xqxbby@mail.there.com>\r\nSubject: Relay webhooks rawk!\r\nTo: you@there.com\r\nContent-Type: multipart/alternative; boundary=deaddeaffeedf00fall45dbhail980dhypnot0ad\r\n\r\n--deaddeaffeedf00fall45dbhail980dhypnot0ad\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHi there SparkPostians.\r\n\r\n--deaddeaffeedf00fall45dbhail980dhypnot0ad\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<p>Hi there <strong>SparkPostians</strong></p>\r\n\r\n--deaddeaffeedf00fall45dbhail980dhypnot0ad--\r\n",
                        "email_rfc822_is_base64": false,
                        "headers": [
                            {
                                "Return-Path": "<me@here.com>"
                            },
                            {
                                "MIME-Version": "1.0"
                            },
                            {
                                "From": "me@here.com"
                            },
                            {
                                "Received": "by 10.114.82.10 with HTTP; Mon, 4 Jul 2016 07:53:14 -0700 (PDT)"
                            },
                            {
                                "Date": "Mon, 4 Jul 2016 15:53:14 +0100"
                            },
                            {
                                "Message-ID": "<484810298443-112311-xqxbby@mail.there.com>"
                            },
                            {
                                "Subject": "Relay webhooks rawk!"
                            },
                            {
                                "To": "you@there.com"
                            }
                        ],
                        "html": "<p>Hi there <strong>SparkPostians</strong>.</p>",
                        "subject": "We come in peace",
                        "text": "Hi there SparkPostians.",
                        "to": [
                            "your@yourdomain.com"
                        ]
                    },
                    "customer_id": "1337",
                    "friendly_from": "me@here.com",
                    "msg_from": "me@here.com",
                    "rcpt_to": "you@there.com",
                    "webhook_id": "4839201967643219"
                }
            }
        }
    ]
    ```


### Create a Relay Webhook [POST /v1/relay-webhooks]

Create a relay webhook by providing a relay webhooks object as the POST request body.

+ Data Structure
    + name (string) - Relay webhook name
    + target: (string, required) - URL of the target to which to POST relay batches. Only ports 80 for http and 443 for https can be set.
    + auth_type: none, oauth2 (enum) - Type of authentication to be used during POST requests to target.
        + Default: none
    + auth_request_details (object) - Object containing details needed to request authorization token for OAuth 2.0. This is required when `auth_type` is oauth2 and only grant_type of credentials is supported.
        + url (string, required) - The URL for the authorization server.
        + body (object, required) - The body to send in the request to the authorization server. This likely should contain the client ID, and client secret.
    + auth_token (string) - Authentication token to present in the `X-MessageSystems-Webhook-Token` header of POST requests to target.
    + match (object, required) - Restrict which inbound messages will be relayed to the target.
        + domain (string, required) - Inbound domain associated with this webhook.
    + custom_headers (object) - Object of custom HTTP headers to be used during POST requests to target.


+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "name": "Replies Webhook",
                "target": "https://webhooks.customer.example/replies",
                "auth_token": "5ebe2294ecd0e0f08eab7690d2a6ee69",
                "auth_type": "oauth2",
                "auth_request_details": {
                    "url": "http://client.example.com/tokens",
                    "body": {
                        "client_id": "CLIENT123",
                        "client_secret": "9sdfj791d2bsbf"
                    }
                },
                "custom_headers": {
                    "x-api-key": "abcd"
                },
                "match": {
                    "domain": "email.example.com"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "results": {
                    "id": "12013026328707075"
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Domain 'domain' is not a registered inbound domain",
                    }
                ]
            }

+ Response 409 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Domain 'domain' is already in use",
                    }
                ]
            }

+ Response 422 (application/json)

    + Body

            {
                "errors" : [
                    {
                        "param": "custom_headers",
                        "message": "Header is reserved and cannot be used",
                        "value": "reserved-header"
                    }
                ]
            }

+ Response 422 (application/json)

    + Body

            {
                "errors": [
                    {
                        "param": "custom_headers",
                        "message": "You may only have up to 5 custom headers"
                    }
                ]
            }

### Validate a Relay Webhook [POST /v1/relay-webhooks/{id}/validate]
The validation request sends an example batch to the target URL, validates that the target responds with HTTP 200,
and returns information on the response received from the target.

[Example batch](#header-relay-webhook-payload)

+ Parameters
    + id (required, string, `12013026328707075`)

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf


+ Response 200 (application/json)

        {
            "results": {
                "msg": "Test POST to endpoint succeeded",
                "response": {
                    "status": 200,
                    "headers": {
                        "Content-Type": "text/plain"
                    },
                    "body": "OK"
                }
            }
        }

### Retrieve a Relay Webhook [GET /v1/relay-webhooks/{id}]

Retrieve a specific relay webhook by specifying the webhook ID in the URI path.

+ Parameters
    + id (required, string, `12013026328707075`)

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
                "results": {
                    "name": "Replies Webhook",
                    "target": "https://webhooks.customer.example/replies",
                    "auth_token": "5ebe2294ecd0e0f08eab7690d2a6ee69",
                    "auth_type": "oauth2",
                    "auth_request_details": {
                        "url": "https://oauth.myurl.com/tokens",
                        "body": {
                            "client_id": "<oauth client id>",
                            "client_secret": "<oauth client secret>"
                        }
                    },
                    "custom_headers": {
                        "x-api-key": "abcd"
                    },
                    "match": {
                        "protocol": "SMTP",
                        "domain": "email.example.com"
                    }
                }
            }

+ Response 401 (application/json)

    + Body

        {
            "errors": [
                {
                    "message": "Unauthorized",
                }
            ]
        }

+ Response 404 (application/json)

    + Body

        {
            "errors": [
                {
                    "message": "Resource could not be found"
                }
            ]
        }

### Update a Relay Webhook [PUT /v1/relay-webhooks/{id}]

Update a relay webhook by specifying the webhook ID in the URI path.

+ Data Structure
    + name (string) - Relay webhook name
    + target (string) - URL of the target to which to POST relay batches. Only ports 80 for http and 443 for https can be set.
    + auth_token (string) - Authentication token to present in the `X-MessageSystems-Webhook-Token` header of POST requests to target.
    + auth_type: none, oauth2 (enum)
        Type of authentication to be used during POST requests to target. Read more about [webhook authentication](https://www.sparkpost.com/docs/tech-resources/webhook-authentication/#webhook-authentication-set-up).
    + auth_request_details (object) - Object containing details needed to request authorization token for OAuth 2.0. This is required when `auth_type` is oauth2 and only grant_type of credentials is supported.
        + url (string, required) - The URL for the authorization server.
        + body (object, required) - The body to send in the request to the authorization server. This likely should contain the client ID, client secret, and grant type.
    + match (object) - Restrict which inbound messages will be relayed to the target.
        + domain (string) - Inbound domain associated with this webhook.
    + custom_headers (object) - Object of custom HTTP headers to be used during POST requests to target.


+ Parameters
    + id (required, string, `12013026328707075`)

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "name": "New Replies Webhook",
                "target": "https://webhook.customer.example/replies",
                "auth_token": "A different auth token",
                "auth_type": "none",
                "custom_headers": {
                    "x-api-key": "abcd"
                },
                "match": {
                    "domain": "email.a-different-domain.com"
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "results": {
                    "id": "12013026328707075"
                }
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Domain 'domain' is not a registered inbound domain",
                    }
                ]
            }

+ Response 400 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "no valid fields in body"
                    }
                ]
            }

+ Response 404 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Resource could not be found"
                    }
                ]
            }

+ Response 409 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Domain 'domain' is already in use",
                    }
                ]
            }

### Delete a Relay Webhook [DELETE /v1/relay-webhooks/{id}]

Delete a relay webhook by specifying the webhook ID in the URI path.

+ Parameters
    + id (required, string, `12013026328707075`)

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

+ Response 200

+ Response 404 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Resource could not be found"
                    }
                ]
            }


### List all Relay Webhooks [GET /v1/relay-webhooks]

List all your relay webhooks.

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf
            Accept: application/json

+ Response 200 (application/json)

    + Body

            {
                "results": [
                    {
                        "id": "12013026328707075",
                        "name": "Replies Webhook",
                        "target": "https://webhooks.customer.example/replies",
                        "auth_token": "5ebe2294ecd0e0f08eab7690d2a6ee69",
                        "auth_type": "oauth2",
                        "auth_request_details": {
                            "url": "https://oauth.myurl.com/tokens",
                            "body": {
                                "client_id": "<oauth client id>",
                                "client_secret": "<oauth client secret>"
                            }
                        },
                        "custom_headers": {
                            "x-webhook-source": "sparkpost"
                        },
                        "match": {
                            "protocol": "SMTP",
                            "domain": "email.example.com"
                        }
                    }
                ]
            }

+ Response 401 (application/json)

    + Body

            {
                "errors": [
                    {
                        "message": "Unauthorized"
                    }
                ]
            }
