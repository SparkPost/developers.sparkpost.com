FORMAT: 1A
title: Transmissions
description: Use the transmissions API to send a batch of messages through SparkPost.

# Group Transmissions

The Transmissions endpoint lets you send email. Each transmission can send an email to a single recipient or thousands. SparkPost generates and sends messages using the options you've defined, a list of recipients, and the content given in transmissions call.

When creating a transmission, the [options](#header-request-body) allow you to configure engagement tracking, sending optimization, global substitution data, and more to control how your emails are sent.

To set the recipients you can include the all recipients in the request or use a [stored recipient list](/api/recipient-lists/). In each recipient, you can pass in metadata and substitution data to [personalize](/api/substitutions-reference/) each email.

The content of the messages can be passed in 4 different ways: [inline content](), a [stored template](), an [A/B test](), or raw [RFC822 content](). Each method has different use cases they are best suited for. All of these types of content can use the substitution data and metadata to create a unique message for each recipient.

Learn more about [how to optimize your sending](https://www.sparkpost.com/docs/tech-resources/smtp-rest-api-performance/) with SparkPost.

### The Sandbox Domain

The sandbox domain allows you to send your first email without setting up a sending domain. You can send up to 5 sandbox messages over the lifetime of your account. To send a message from the sandbox domain, set the `from` address to `anything@sparkpostbox.com` and set `options.sandbox` to `true`. Just like with any sending domain, you can set the part before the `@` to any mailbox.

For more extensive testing with your own sending doman, use the SparkPost [Sink Server](https://www.sparkpost.com/docs/faq/using-sink-server/).

<banner status="info"><strong>Note</strong>: The sandbox domain is not available for <strong><a href="https://www.sparkpost.com/enterprise-email/">Enterprise</a></strong> accounts.</banner>


### Sending Limits

Your account has a sandbox, hourly, daily, and monthly sending limit based on your current plan level. You can view your current limits on the [dashboard](https://app.sparkpost.com/dashboard) ([EU](https://app.eu.sparkpost.com/dashboard)). If a transmission will push your over the sandbox, hourly, or daily sending limit, an error with the status code `420` is returned, along with a message detailing which limit you will exceed. If this happens, no messages are sent, regardless of the number of messages that to exceeded your limit.

Learn more about these [limits](https://www.sparkpost.com/docs/faq/daily-and-monthly-quota-limits/) and [what counts towards usage](https://www.sparkpost.com/docs/getting-started/what-counts-daily-monthly-usage/).

```json
{
  "errors": [
    {
      "message": "Exceed Sending Limit (hourly)",
      "code": "2101"
    }
  ]
}
```

## Create a Transmission [/transmissions/{?num_rcpt_errors}]

You can create a transmission in a number of ways. In all cases, you can use the `num_rcpt_errors` parameter to limit the number of recipient errors returned. The entirety of transmission content (text + html + attachments + inline images) is limited to 20 MBs.

### Request Body

+ Data Structure: Parameters
    + num_rcpt_errors (number, `3`) - Maximum number of recipient errors that this call can return, otherwise all validation errors are returned.


+ Data Structure
    + options (object) - Object containing transmission options. If an option is not set, the [template-level option](#header-template-object) is used.
        + start_time (string) - Delay generation of messages until this datetime. For additional information, see [Scheduled Transmissions](#transmissions-scheduled-transmissions). **Not available in SparkPost EU.** <br />Format: `YYYY-MM-DDTHH:MM:SS+-HH:MM`
            + Default: now
        + open_tracking (boolean) - Enable or disable open tracking.
            + Default: true
        + click_tracking (boolean) - Enable or disable click tracking.
            + Default: true
        + transactional (boolean) - Distinguish between [transactional and non-transactional](https://www.sparkpost.com/resources/infographics/email-difference-transactional-vs-commercial-emails/) messages for unsubscribe and suppression purposes.
            + Default: false
        + sandbox (boolean) - Whether to use the [sandbox sending domain](#header-the-sandbox-domain).
            + Default: false
        + skip_suppression (boolean) - Whether to ignore customer suppression rules. <a href="https://www.sparkpost.com/enterprise-email/"><span class="label label-warning"><strong>Enterprise</strong></span></a> only.
            + Default: false.
        + smart_send (boolean) - <a href="/labs/"><span class="label label-info"><strong>LABS</strong></span></a> Whether to enable [Smart Send](https://www.sparkpost.com/blog/smart-send/), which will suppress unengaged recipients. <br/><a href="https://www.sparkpost.com/enterprise-email/"><span class="label label-warning"><strong>Enterprise</strong></span></a> accounts, contact your TAM for support details.
            + Default: false
        +  ip_pool (string) - The ID of a [dedicated IP pool](https://www.sparkpost.com/docs/deliverability/dedicated-ip-pools) associated with your account. If this field is not provided, the account's default dedicated IP pool is used (if there are IPs assigned to it). <br/><a href="https://www.sparkpost.com/enterprise-email/"><span class="label label-warning"><strong>Enterprise</strong></span></a> accounts, contact your TAM for support details.
        + inline_css (boolean) - Whether to inline the CSS in `<style>` tags in the `<head>` in the HTML content.
            + Defaults: false.
    + recipients (enum, required) - Array of inline recipient objects or object containing stored recipient list ID. Specify a stored recipient list or specify recipients inline.  When using a stored recipient list, specify the `list_id` as described in Using a Stored Recipient List.  Otherwise, provide the recipients inline using the fields described in the Recipient List API documentation for Recipient Attributes.
        + (array)
        + (object)
    + campaign_id (string) - Name of the campaign. Maximum length - 64 bytes
    + description (string) - Description of the transmission. Maximum length - 1024 bytes
    + metadata (object) - Transmission level metadata containing key/value pairs. Metadata is available during events through the Webhooks and is provided to the substitution engine.  A maximum of 1000 bytes of merged metadata (transmission level + recipient level) is available with recipient metadata taking precedence over transmission metadata when there are conflicts.
    + substitution_data (object) - Key/value pairs that are provided to the substitution engine| no | Recipient substitution data takes precedence over transmission substitution data. Unlike metadata, substitution data is not included in Webhook events.
    + return_path (string)
        Email address to use for envelope FROM. For <span class="label label-primary"><strong>SparkPost</strong></span> accounts, the domain part of the return_path address must be a [CNAME-verified sending domain](sending-domains.html#sending-domains-verify-post).  The local part of the return_path address will be overwritten by SparkPost servers.<br><br>For <a href="https://www.sparkpost.com/enterprise-email/"><span class="label label-warning"><strong>Enterprise</strong></span></a> accounts, the return_path may be any valid email address and the localpart in the return_path will **not** be overwritten by SparkPost servers.  To support Variable Envelope Return Path (VERP), this field can also optionally be specified inside each recipient object in order to give the recipients unique envelope MAIL FROM addresses.
    + content (object, required) - Content that will be used to construct a message.  Specify a stored template or specify inline template content. When using a stored template, specify the `template_id` as described in Using a Stored Template.  Otherwise, provide the inline content using the fields described in Inline Content Attributes.  Maximum size - 20MBs
+ Sample

    ```
    {
      "options": {
        "open_tracking": true,
        "click_tracking": true,
        "transactional": false,
        "sandbox": false,
        "ip_pool": "my_ip_pool",
        "inline_css": false
      },
      "description": "Christmas Campaign Email",
      "campaign_id": "christmas_campaign",
      "metadata": {
        "user_type": "students",
        "education_level": "college"
      },
      "substitution_data": {
        "sender": "Big Store Team",
        "holiday_name": "Christmas"
      },
      "recipients": [
        {
          "address": {
            "email": "wilma@flintstone.com",
            "name": "Wilma Flintstone"
          },
          "tags": [
            "greeting",
            "prehistoric",
            "fred",
            "flintstone"
          ],
          "metadata": {
            "age": "24",
            "place": "Bedrock"
          },
          "substitution_data": {
            "customer_type": "Platinum",
            "year": "Freshman"
          }
        }
      ],
      "content": { ... }
    }
    ```

### Stored Recipient List

The following recipients attribute is used when specifying a stored recipient list in the transmission. Note that this attribute should not be present when specifying recipients inline.

+ Data Structure: Recipients Content
    + list_id (string, required) 
        Identifier of the stored recipient list to use.
        <hr style="margin-top: 0;" />

        Create a transmission using a stored recipients list by specifying the `list_id` in the `recipients` attribute.
+ Sample
    ```
    {
        "campaign_id": "christmas_campaign",
        "recipients": {
            "list_id": "christmas_sales_2013"
        },
        "content": {
            "from": {
                "name": "Fred Flintstone",
                "email": "fred@flintstone.com"
            },
            "subject": "Big Christmas savings!",
            "text": "Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{user_type}}\n {{sender}}",
            "html": "<p>Hi {{name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n</p><p>Hurry, this offer is only to {{user_type}}\n</p><p>{{sender}}</p>"
        }
    }
    ```

<br />
<br />

### Send Inline Content [POST]

The following attributes are used when specifying inline content in the transmission's `content` object:

+ Data Structure: Content Attributes
    + html (string) - HTML content for the email's `text/html` MIME part. At a minimum, html or text is required. Expected in the UTF-8 charset with no `Content-Transfer-Encoding` applied.
    + text (string) - Text content for the email's `text/plain` MIME part. At a minimum, html or text is required. Expected in the UTF-8 charset with no `Content-Transfer-Encoding` applied.
    + subject (string, required) - Email subject line. Expected in the UTF-8 charset without RFC2047 encoding.  Substitution syntax is supported.
    + from (enum, required) - Address `"from": "deals@company.com"` or object composed of the `name` and `email` fields `"from": { "name": "My Company", "email": "deals@company.com" }` used to compose the email's `From` header| yes, for email. Substitution syntax is supported.
        + (string)
        + (object)
            + param (array) - cool
    + reply_to (string) - Email address used to compose the email's "Reply-To" header. Substitution syntax is supported.
    + headers (object) - Object containing headers other than `Subject`, `From`, `To`, and `Reply-To` . See the [Header Notes](#header-header-notes).
    + attachments (array) - Array of attachments. For a full description, see [Attachment Attributes](#header-attachment-attributes).
    + inline_images (array) - Array of inline images For a full description, see [Inline Image Attributes](#header-inline-image-attributes).


#### Attachment Attributes

<banner status="danger">Sending attachments with malicious content is <strong>strictly prohibited</strong> by SparkPost. This includes (and is not limited to) files with `bat` and `exe` extensions.</banner>

Attachments for a transmission are specified in the `content.attachments` JSON array where each JSON object in the array is described by the following fields:

| Field         | Type     | Description                           | Required   | Notes   |
|--------------------|:-:       |---------------------------------------|-------------|------------------|
|type |string |The MIME type of the attachment; e.g., `text/plain`, `image/jpeg`, `audio/mp3`, `video/mp4`, `application/msword`, `application/pdf`, etc., including the `charset` parameter (ex: `text/html; charset="UTF-8"`) if needed. The value will apply as-is to the `Content-Type` header of the generated MIME part for the attachment. | yes |  |
|name |string |The filename of the attachment (for example, `document.pdf`). This is inserted into the filename parameter of the `Content-Disposition` header. | yes | Maximum length - 255 bytes |
|data |string |The content of the attachment as a Base64 encoded string.  The string should not contain `\r\n` line breaks.  The SparkPost systems will add line breaks as necessary to ensure the Base64 encoded lines contain no more than 76 characters each. | yes | The entirety of transmission content (text + html + attachments + inline images) is limited to 20 MBs |

#### Inline Image Attributes

Inline images for a transmission are specified in the `content.inline_images` JSON array where each JSON object in the array is described by the following fields:

+ type (string) - The MIME type of the image; e.g., `image/jpeg`.  The value will apply as-is to the `Content-Type` header of the generated MIME part for the image. | yes |  |
+ name (string) - The name of the inline image, which will be inserted into the `Content-ID` header. The image should be referenced in your HTML content using `<img src="cid:THIS_NAME" />`. The name must be unique within the `content.inline_images` array. | yes | Maximum length - 255 bytes |
+ data (string) - The content of the image as a Base64 encoded string.  The string should not contain `\r\n` line breaks.  The SparkPost systems will add line breaks as necessary to ensure the Base64 encoded lines contain no more than 76 characters each. | yes |  |

{
    "campaign_id":"attachment_example",
    "recipients":[
        {
            "address":"wilma@flintstone.com"
        }
    ],
    "content":{
        "from":{
            "email":"billing@company.example",
            "name":"Example Company"
        },
        "subject":"Billing statement",
        "html":"<b>Please see your attached billing statement</b>",
        "attachments":[
            {
                "type":"application/pdf",
                "name":"billing.pdf",
                "data":"Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
            },
            {
                "type":"text/plain; charset=UTF-8",
                "name":"explanation.txt",
                "data":"TW92ZSBhbG9uZy4gIE5vdGhpbmcgdG8gc2VlIGhlcmUu"
            }
        ]
    }
}

{
    "campaign_id": "inline_image_example",
    "recipients": [
        {
            "address": "wilma@flintstone.com"
        }
    ],
    "content": {
        "from": {
            "email": "marketing@company.example",
            "name": "Example Company"
        },
        "subject": "Inline image example",
        "html": "<html><body>Here is your inline image!<br> <img src=\"cid:my_image.jpeg\"></body></html>",
        "inline_images": [
            {
                "type": "image/jpeg",
                "name": "my_image.jpeg",
                "data": "VGhpcyBkb2Vzbid0IGxvb2sgbGlrZSBhIGpwZWcgdG8gbWUh"
            }
        ]
    }
}


#### Header Notes

* Headers such as `Content-Type` and `Content-Transfer-Encoding` are not allowed, as they are auto-generated upon construction of the email.
* The `To` header should not be specified, since it is generated from each recipient's `address` field.
* Each header value is expected in the UTF-8 charset without RFC2047 encoding.
* Substitution syntax is supported in headers.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "options": {
                    "open_tracking": true,
                    "click_tracking": true,
                    "transactional": false,
                    "sandbox": false,
                    "ip_pool": "my_ip_pool",
                    "inline_css": false
                },
                "description": "Christmas Campaign Email",
                "campaign_id": "christmas_campaign",
                "metadata": {
                    "user_type": "students",
                    "education_level": "college"
                },
                "substitution_data": {
                    "sender": "Big Store Team",
                    "holiday_name": "Christmas"
                },
                "recipients": [
                    {
                        "address": {
                            "email": "wilma@flintstone.com",
                            "name": "Wilma Flintstone"
                        },
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "age": "24",
                            "place": "Bedrock"
                        },
                        "substitution_data": {
                            "customer_type": "Platinum",
                            "year": "Freshman"
                        }
                    }
                ],
                "content": {
                    "from": {
                        "name": "Fred Flintstone",
                        "email": "fred@flintstone.com"
                    },
                    "subject": "Big Christmas savings!",
                    "reply_to": "Christmas Sales <sales@flintstone.com>",
                    "headers": {
                        "X-Customer-Campaign-ID": "christmas_campaign"
                    },
                    "html": "<p>Hi {{address.name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n</p><p>Hurry, this offer is only to {{user_type}}\n</p><p>{{sender}}</p>"
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 1,
                "id": "11668787484950529"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "description": "Unconfigured or unverified sending domain.",
                    "code": "7001",
                    "message": "Invalid domain"
                }
            ]
        }


### Send a Template [POST]

The following attributes should be set in the `content` object when using a template as the transmission's content:

+ Data Structure: Content Attributes
    + template_id (string, required) - ID of the template to use.
    + use_draft_template (boolean) - Whether to use the draft version. If this is set to `true` and no draft exists, the transmission will fail.
        + Default: false


+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "options": {
                    "open_tracking": true,
                    "click_tracking": true
                },
                "campaign_id": "thanksgiving_campaign",
                "content": {
                    "template_id": "christmas_offer",
                    "use_draft_template": true
                },
                "metadata": {
                    "user_type": "students",
                    "age_group": "18-35"
                },
                "substitution_data": {
                    "status": "shopping",
                    "holiday": "Thanksgiving"
                },
                "recipients": [
                    {
                        "address": {
                            "email": "wilma@flintstone.com",
                            "name": "Wilma Flintstone"
                        },
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "age": "24",
                            "place": "Bedrock"
                        },
                        "substitution_data": {
                            "first_name": "Wilma",
                            "last_name": "Flintstone"
                        }
                    },
                    {
                        "address": {
                            "email": "abc@flintstone.com"
                        },
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "age": "33",
                            "place": "MD"
                        }
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "errors": [
                {
                    "message": "transmission created, but with validation errors",
                    "code": "2000"
                }
            ],
            "results": {
                "rcpt_to_errors": [
                    {
                        "message": "required field is missing",
                        "description": "address.email is required for each recipient",
                        "code": "1400"
                    }
                ],
                "total_rejected_recipients": 1,
                "total_accepted_recipients": 1,
                "id": "11668787484950530"
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "message": "resource not found",
                    "description": "template 'christmas_offer' does not exist",
                    "code": "1600"
                }
            ]
        }


### Send an A/B Test [POST]

The following attribute should be set in the `content` object when sending an A/B test as the transmission's content:

+ Data Structure: Content Attributes
    + ab_test_id (string, required) - ID of the A/B test to use. Specify this field when using an A/B test.

When using substitution data with A/B tests, data for all possible templates must be provided.  We recommend that all templates that make up an A/B test should use the same substitution data fields.

<banner status="warning"><strong>Note</strong>: A/B Tests only support inline single recipient transmissions currently</banner>

+ Request

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "options": {
                    "open_tracking": true,
                    "click_tracking": true
                },
                "content": {
                    "ab_test_id": "password_reset"
                },
                "recipients": [
                    {
                        "address": {
                            "email": "wilma@flintstone.com",
                            "name": "Wilma Flintstone"
                        },
                        "substitution_data": {
                            "first_name": "Wilma",
                            "last_name": "Flintstone"
                        }
                    }
                ]
            }

+ Response 200 (application/json)

        {
            "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 1,
                "id": "11668787493850529"
            }
        }


### Send RFC822 Content [POST]

The following attribute should be set in the `content` object when sending RFC822 content as the transmission's content:

+ Data Structure: RFC 822 Content
    + email_rfc822 (string) - Pre-built message with the format as described by the [message/rfc822 Content-Type](http://tools.ietf.org/html/rfc2046#section-5.2.1).

* Substitutions will be applied in the top-level headers and the first non-attachment `text/plain` and first non-attachment `text/html` MIME parts only.
* Lone `LF`s and lone `CR`s are allowed. SparkPost converts line endings to `CRLF` where necessary.
* It should NOT be dot stuffed. SparkPost dot stuffs before sending the email.
* It should NOT contain the SMTP terminator `\r\n.\r\n`. SparkPost adds this terminator.
The provided email_rfc822 in MIME format will be rejected if SparkPost cannot parse the contents into a MIME tree.

Content headers are not generated for transmissions providing RFC822 content. They are expected to be provided as headers contained in the RFC822 content.

+ Request (application/json)

    + Headers

            Authorization: 14ac5499cfdd2bb2859e4476d2e5b1d2bad079bf

    + Body

            {
                "options": {
                    "open_tracking": true,
                    "click_tracking": true,
                    "transactional": false,
                    "sandbox": false,
                    "ip_pool": "",
                    "inline_css": false
                },
                "description": "Christmas Campaign Email",
                "campaign_id": "christmas_campaign",
                "metadata": {
                    "user_type": "students",
                    "education_level": "college"
                },
                "substitution_data": {
                    "sender": "Big Store Team",
                    "holiday_name": "Christmas"
                },
                "recipients": [
                    {
                        "address": {
                            "email": "wilma@flintstone.com",
                            "name": "Wilma Flintstone"
                        },
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "age": "24",
                            "place": "Bedrock"
                        },
                        "substitution_data": {
                            "first_name": "Wilma",
                            "customer_type": "Platinum",
                            "year": "Freshman"
                        }
                    },
                    {
                        "address": {
                            "email": "abc@flintstone.com",
                            "name": "Fred Flintstone"
                        },
                        "tags": [
                            "greeting",
                            "prehistoric",
                            "fred",
                            "flintstone"
                        ],
                        "metadata": {
                            "age": "33",
                            "place": "NY"
                        },
                        "substitution_data": {
                            "first_name": "Fred",
                            "customer_type": "Sliver",
                            "year": "Senior"
                        }
                    }
                ],
                "content": {
                    "email_rfc822": "Content-Type: text\/plain\r\nTo: \"{{address.name}}\" <{{address.email}}>\r\n\r\n Hi {{first_name}} \nSave big this Christmas in your area {{place}}! \nClick http://www.mysite.com and get huge discount\n Hurry, this offer is only to {{customer_type}}\n {{sender}}\r\n"
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "total_rejected_recipients": 0,
                "total_accepted_recipients": 2,
                "id": "11668787484950529"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "description": "Unconfigured or unverified sending domain.",
                    "code": "7001",
                    "message": "Invalid domain"
                }
            ]
        }

## Scheduled Transmissions [/transmissions]

<banner status="info"><strong>Note</strong>: Not available in SparkPost EU.</banner>

### Schedule a Transmission [POST /transmissions/]

Create a scheduled transmission to be generated and sent at a future time by specifying `start_time` in the `options` attribute.

#### Templates in Scheduled Transmissions
Transmissions scheduled with a template will use the version of the template available at the scheduled time of generation.
This means updates to the template made between scheduling the transmission and time of generation will be reflected in the transmission.
Once message generation has been initiated, all emails in the transmission will be generated using the template version available at the start of the generation.
If a template update is made during the generation of a transmission that uses that template,
the template update will succeed, but the transmission will continue to use the version that was available at the start of the generation.

+ Request

    + Body

            {
                "name": "Fall Sale",
                "campaign_id": "fall",
                "options": {
                    "start_time": "2017-02-11T08:00:00-04:00",
                    "open_tracking": true,
                    "click_tracking": true
                },
                "recipients": {
                    "list_id": "all_subscribers"
                },
                "content": {
                    "template_id": "fall_deals"
                }
            }

+ Response 200 (application/json)

        {
            "results": {
                "total_rejected_recipients": 1000,
                "total_accepted_recipients": 0,
                "id": "11668787484950529"
            }
        }


### Retrieve a Scheduled Transmission [GET /transmissions/{id}]

Returns details about a scheduled transmission.
The response for a transmission using an inline template will include `"template_id":"inline"`.
Inline templates cannot be specifically queried.

+ Parameters
    + id: 11714265276872 (number, required)

+ Request

+ Response 200 (application/json)

        {
            "results": {
                "transmission": {
                    "id": "11750520427380741",
                    "description": "",
                    "state": "Success",
                    "campaign_id": "white_christmas",
                    "content": {
                        "template_id": "Bob's template",
                        "use_draft_template": false
                    },
                    "rcpt_list_chunk_size": 100,
                    "rcpt_list_total_chunks": 1,
                    "num_rcpts": 10,
                    "num_generated": 10,
                    "num_failed_gen": 0,
                    "generation_start_time": "2014-05-22T15:12:59+00:00",
                    "generation_end_time": "2014-05-22T15:13:00+00:00",
                    "substitution_data": "",
                    "metadata": {
                        "is_snowing": "yes"
                    },
                    "options": {
                        "open_tracking": "",
                        "click_tracking": ""
                    }
                }
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "message": "resource not found",
                    "description": "Resource not found:transmission id 123",
                    "code": "1600"
                }
            ]
        }

### Delete a Scheduled Transmission [DELETE /transmissions/{id}]

Only transmissions which are scheduled for future generation may be deleted.

<banner status="warning">Scheduled transmissions cannot be deleted if the transmission is within 10 minutes of the scheduled generation time.</banner>

+ Parameters
    + id: 11714265276872 (number, required)

+ Request

+ Response 204

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "message": "resource not found",
                    "code": "1600",
                    "description": "Resource not found:transmission id 999999999"
                }
            ]
        }

+ Response 409 (application/json)

        {
            "errors": [
                {
                    "message": "too close to generation time to delete transmission",
                    "code": "2003",
                    "description": "Deletion time window (660 seconds) doesn't permit transmission deletion"
                }
            ]
        }

+ Response 409 (application/json)

        {
            "errors": [
                {
                    "message": "transmission database record is in an invalid state for deletion",
                    "code": "2006",
                    "description": "Unable to delete a transmission that is in progress (state=Generating)"
                }
            ]
        }

### Delete Scheduled Transmissions By Campaign ID [DELETE /transmissions{?campaign_id}]

<banner status="info"><strong>Note:</strong> Enterprise only, account-specific configuration option.</banner>

Delete all transmissions in a campaign.

+ Parameters
    + campaign_id: `white-christmas` (string, required)

+ Request

+ Response 204

### List All Scheduled Transmissions [GET /transmissions{?campaign_id,template_id}]


#### Returns

Returns an array of transmission objects.

+ Data Structure: Transmission Object
    + id (number) - Transmission ID
    + state (enum)
        + submitted
        + Generating
        + Success
        + Canceled
    + template_id (string) - Transmissions with inline content will have this field as "inline".
    + campaign_id (string)
    + description


+ Parameters
    + campaign_id: thanksgiving (string, optional) - Campaign to filter by.
    + template_id (string, optional) - Template to filter by. Cannot filter inline content transmissions.

+ Request

+ Response 200 (application/json)

        {
            "results": [
                {
                    "content": {
                        "template_id": "winter_sale"
                    },
                    "id": "11713562166689858",
                    "campaign_id": "thanksgiving",
                    "description": "",
                    "state": "submitted"
                    },
                {
                    "content": {
                        "template_id": "inline"
                    },
                    "id": "11713562166689979",
                    "campaign_id": "thanksgiving",
                    "description": "",
                    "state": "submitted"
                },
                {
                    "content": {
                        "template_id": "thanksgiving-template"
                    },
                    "id": "11713048079237202",
                    "campaign_id": "thanksgiving",
                    "description": "",
                    "state": "submitted"
                }
            ]
        }
